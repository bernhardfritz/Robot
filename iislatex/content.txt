1. odometry

2. generating motion commands to attain goal location
After the first two exercises we concluded that we can no longer use the default
moving and turning robot commands ('k' and 'l') since they were very inaccurate.
So we decided to use a combination of the following commands instead:
- 'w' for moving forward
- 's' for stopping
- 'i' to set a specific velocity (we used this to turn in place)
- 'q' for sensor measurements
These commands as well as Java's capability of letting a Thread sleep for a
specific amount of time, enabled us to implement more precise motion commands.
We decided to use a design pattern called command pattern to structure our code.
Following commands have been implemented:
- Translation
- GoTo
- RelativeRotation
- AbsoluteRotation
- Measurement

2.1. Translation
The Translation command can be considered as a command for relative robot
movement. As soon as the Translation command is called we send a 'w' character
to the robot. This result in sudden forward movement of the robot. Given a
distance in cm as parameter and the robot velocity we measured when we got the
robot we are able to calculate the time we need to wait to send a 's' character
to the robot to make it stop. While the robot is moving we constantly keep track
of it's x and y coordinates in world coordinate system.

2.3. RelativeRotation
As soon as the RelativeRotation command is called we send a 'i' character with
specific parameters to make the robot rotate in place counterclockwise. Given an
angle in radiant as parameter and the robot turn velocity we measured when we
got the robot we are able to calculate the time we need to wait to send a 's'
character to the robot to make it stop. While the robot is turning we constantly
keep track of its angle in world coordinate system.

2.4. Absolute Rotation
AbsoluteRotation is an extenstion of RelativeRotation and only uses some math to
enable us to make the robot turn to a specific angle in world coordinate system.

2.2. GoTo
GoTo consists of two commands: AbsoluteRotation and Translation. Given two
parameters x and y (world coordinates) and the robot coordinates we are able to
calculate the angle we need to turn the robot so that it is facing the goal as
well as the distance to the goal.

2.5. Measurement
The Measurement command is used whenever we want to read sensor values. We
discovered that only three of five sensors are actually working:
- front left sensor
- front middle sensor
- front right sensor
The Measurement command is exclusively called by the SensorManager which will be
covered in the next section.

3. obstacle avoidance

4. color correction and beacon detection

5. self-localization

6. finite state machine (optional)

7. algorithm for caging a ball with and without obstacles

8. strategy for the tournament

9. miscellaneous
  9.1. user interface
  9.2. work contribution breakdown
